
DC_Motor_controlling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046f  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000169  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000358  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000133  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
}
//------------------------------------------------

void ADC_init(void) // Initialization of ADC
{
	ADMUX|=(1<<REFS0); // AVcc with external capacitor at AREF
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
	// Enable ADC and set Prescaler division factor as 128
}
  ba:	08 95       	ret

000000bc <ADC_read>:

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111; // channel must be b/w 0 to 7
	ADMUX |= ch; // selecting channel
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
	// Enable ADC and set Prescaler division factor as 128
}

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111; // channel must be b/w 0 to 7
  c2:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= ch; // selecting channel
  c4:	98 2b       	or	r25, r24
  c6:	90 83       	st	Z, r25
	ADCSRA|=(1<<ADSC); // start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF))); // waiting for ADIF, conversion complete
  d2:	80 81       	ld	r24, Z
  d4:	84 ff       	sbrs	r24, 4
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <ADC_read+0x16>
	ADCSRA|=(1<<ADIF); // clearing of ADIF, it is done by writing 1 to it
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
	return (ADC);
  e2:	80 91 78 00 	lds	r24, 0x0078
  e6:	90 91 79 00 	lds	r25, 0x0079
  ea:	08 95       	ret

000000ec <main>:

// ------------------------------------------------
int main(void)
{
	uint16_t value;
	DDRB=0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	ADC_init(); // Initialization of ADC
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	{
		value=ADC_read(0);
		PORTB|=1<<motor;
		if(value<1)
		value=0;
		for (int i=0;i<value;i++)
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
		_delay_us(1);
		PORTB&=~(1<<motor);             
		for(int i=0;i<1023-value;i++)
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d3 e0       	ldi	r29, 0x03	; 3
	uint16_t value;
	DDRB=0xFF;
	ADC_init(); // Initialization of ADC
	while(1)
	{
		value=ADC_read(0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_read>
 102:	ac 01       	movw	r20, r24
		PORTB|=1<<motor;
 104:	28 9a       	sbi	0x05, 0	; 5
		if(value<1)
		value=0;
		for (int i=0;i<value;i++)
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	a1 f0       	breq	.+40     	; 0x132 <main+0x46>

void ADC_init(void);
unsigned int ADC_read(unsigned char);

// ------------------------------------------------
int main(void)
 10a:	9c 01       	movw	r18, r24
	{
		value=ADC_read(0);
		PORTB|=1<<motor;
		if(value<1)
		value=0;
		for (int i=0;i<value;i++)
 10c:	c8 01       	movw	r24, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	00 00       	nop
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	82 17       	cp	r24, r18
 114:	93 07       	cpc	r25, r19
 116:	d9 f7       	brne	.-10     	; 0x10e <main+0x22>
		_delay_us(1);
		PORTB&=~(1<<motor);             
 118:	28 98       	cbi	0x05, 0	; 5
		for(int i=0;i<1023-value;i++)
 11a:	ce 01       	movw	r24, r28
 11c:	84 1b       	sub	r24, r20
 11e:	95 0b       	sbc	r25, r21
 120:	69 f3       	breq	.-38     	; 0xfc <main+0x10>
 122:	09 c0       	rjmp	.+18     	; 0x136 <main+0x4a>
 124:	00 00       	nop
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	28 17       	cp	r18, r24
 12c:	39 07       	cpc	r19, r25
 12e:	30 f7       	brcc	.-52     	; 0xfc <main+0x10>
 130:	f9 cf       	rjmp	.-14     	; 0x124 <main+0x38>
		PORTB|=1<<motor;
		if(value<1)
		value=0;
		for (int i=0;i<value;i++)
		_delay_us(1);
		PORTB&=~(1<<motor);             
 132:	28 98       	cbi	0x05, 0	; 5
		for(int i=0;i<1023-value;i++)
 134:	ce 01       	movw	r24, r28
	{
		value=ADC_read(0);
		PORTB|=1<<motor;
		if(value<1)
		value=0;
		for (int i=0;i<value;i++)
 136:	98 01       	movw	r18, r16
 138:	f5 cf       	rjmp	.-22     	; 0x124 <main+0x38>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
