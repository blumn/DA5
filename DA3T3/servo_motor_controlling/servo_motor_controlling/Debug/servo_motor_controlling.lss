
servo_motor_controlling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004bb  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000184  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014f  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
}
//------------------------------------------------

void ADC_init(void) // Initialization of ADC
{
	ADMUX|=(1<<REFS0); // AVcc with external capacitor at AREF
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
	// Enable ADC and set Prescaler division factor as 128
}
  ba:	08 95       	ret

000000bc <ADC_read>:

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111; // channel must be b/w 0 to 7
	ADMUX |= ch; // selecting channel
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
	// Enable ADC and set Prescaler division factor as 128
}

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111; // channel must be b/w 0 to 7
  c2:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= ch; // selecting channel
  c4:	98 2b       	or	r25, r24
  c6:	90 83       	st	Z, r25
	ADCSRA|=(1<<ADSC); // start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF))); // waiting for ADIF, conversion complete
  d2:	80 81       	ld	r24, Z
  d4:	84 ff       	sbrs	r24, 4
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <ADC_read+0x16>
	ADCSRA|=(1<<ADIF); // clearing of ADIF, it is done by writing 1 to it
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
	return (ADC);
  e2:	80 91 78 00 	lds	r24, 0x0078
  e6:	90 91 79 00 	lds	r25, 0x0079
}
  ea:	08 95       	ret

000000ec <main>:

// ------------------------------------------------
int main(void)
{
	uint16_t value;
	DDRB=0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	DDRD=0xff;
  f0:	8a b9       	out	0x0a, r24	; 10
	ADC_init(); // Initialization of ADc
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
		value=ADC_read(0);
		
		//value=map1(value,0,1023,1000,2000);
		//PORTD=map1(value,0,1023,0,255);
		if(value<1)
		value=1;
  f6:	ee 24       	eor	r14, r14
  f8:	ff 24       	eor	r15, r15
  fa:	e3 94       	inc	r14
  fc:	04 e1       	ldi	r16, 0x14	; 20
  fe:	10 e0       	ldi	r17, 0x00	; 0
		for(int j=0;j<20;j++)
		{
		PORTB|=1<<motor;
		for (int i=0;i<value+1000;i++)
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB=0xFF;
	DDRD=0xff;
	ADC_init(); // Initialization of ADc
	while(1)
	{
		value=ADC_read(0);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_read>
		
		//value=map1(value,0,1023,1000,2000);
		//PORTD=map1(value,0,1023,0,255);
		if(value<1)
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	09 f4       	brne	.+2      	; 0x110 <main+0x24>
		value=1;
 10e:	c7 01       	movw	r24, r14
 110:	a8 01       	movw	r20, r16
		for(int j=0;j<20;j++)
		{
		PORTB|=1<<motor;
		for (int i=0;i<value+1000;i++)
 112:	9c 01       	movw	r18, r24
 114:	28 51       	subi	r18, 0x18	; 24
 116:	3c 4f       	sbci	r19, 0xFC	; 252
		//PORTD=map1(value,0,1023,0,255);
		if(value<1)
		value=1;
		for(int j=0;j<20;j++)
		{
		PORTB|=1<<motor;
 118:	28 9a       	sbi	0x05, 0	; 5
		for (int i=0;i<value+1000;i++)
 11a:	21 15       	cp	r18, r1
 11c:	31 05       	cpc	r19, r1
 11e:	49 f0       	breq	.+18     	; 0x132 <main+0x46>
 120:	ce 01       	movw	r24, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	6a 95       	dec	r22
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x38>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x3e>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	82 17       	cp	r24, r18
 12e:	93 07       	cpc	r25, r19
 130:	c0 f3       	brcs	.-16     	; 0x122 <main+0x36>
		_delay_us(1);
		PORTB&=~(1<<motor);
 132:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9c e8       	ldi	r25, 0x8C	; 140
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x52>
 13e:	00 00       	nop
 140:	41 50       	subi	r20, 0x01	; 1
 142:	50 40       	sbci	r21, 0x00	; 0
		
		//value=map1(value,0,1023,1000,2000);
		//PORTD=map1(value,0,1023,0,255);
		if(value<1)
		value=1;
		for(int j=0;j<20;j++)
 144:	49 f7       	brne	.-46     	; 0x118 <main+0x2c>
 146:	de cf       	rjmp	.-68     	; 0x104 <main+0x18>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
